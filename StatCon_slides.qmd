---
title: "**biplotEZ**"
subtitle: "User-friendly biplots in R<br><br><br> Centre for Multi-Dimensional Data Visualisation (MuViSU) <br>muvisu@sun.ac.za<br><br><br>**StatCon 2023**" 
date: "2 September 2023"
date-format: "iso"
format: 
  revealjs:
    theme: [serif, statcon.scss]
    slide-number: true
    footer: "https://github.com/MuViSU/biplotEZ_beta"
title-slide-attributes: 
  data-background-color: rgb(183,153,98)
  data-background-image: "images//SU_vertical.jpg"
  data-background-size: 15%
  data-background-opacity: "0.9"
  data-background-position: 95% 90%
---

```{r setup}
#| include: false

library(knitr)
options(htmltools.dir.version = FALSE, tibble.width = 45)
opts_chunk$set(
  echo = TRUE, 
  warning = FALSE, 
  message = FALSE, 
  error=FALSE, 
  comment = "#",
  fig.align = 'center', 
  fig.width = 12, 
  fig.height = 11, 
  fig.show = 'hold', 
  fig.retina = 5,
  cache = FALSE
)

# Printing
options(digits=2, width=120)

# libraries
library(biplotEZ)

```

## Installing **biplotEZ**

```{r eval=FALSE, echo=TRUE}
# Install from GitHub
library(devtools)
install_github("MuViSU/biplotEZ_beta")
#check this
library(biplotEZ)
#check this
library(biplotEZ_beta)

# Getting help                 
help(package="biplotEZ")
```

## General notes

::: nonincremental
-   Use the native R pipe: [\|\>]{style="font-family: 'Noto Sans Mono', monospace"}\
-   Since [%\>%]{style="font-family: 'Noto Sans Mono', monospace"} is not required, you do not have to load:

```{r, echo = TRUE}
library(magrittr)
```

-   To set [\|\>]{style="font-family: 'Noto Sans Mono', monospace"} as your default, change the keyboard shortcut **Ctrl-Shift-M**:

::: {layout-ncol="2"}
![Global options](\images\GlobalOptions.jpg){width="10%"}

![Global options](\images\NativePipe.jpg){width="25%"}
:::
:::

## Functions in current version

-   Use the following function to obtain a list of available functions in a package: $~$

```{r, echo = TRUE}
lsf.str("package:biplotEZ")
```

## Flow of functions

-   Start with [biplot()]{style="font-family: 'Noto Sans Mono', monospace"}
    -   Use the preferred biplot: [PCA()]{style="font-family: 'Noto Sans Mono', monospace"} and [CVA()]{style="font-family: 'Noto Sans Mono', monospace"} available in current version
    -   Format [samples()]{style="font-family: 'Noto Sans Mono', monospace"} and [axes()]{style="font-family: 'Noto Sans Mono', monospace"}
    -   Add [alpha.bags()]{style="font-family: 'Noto Sans Mono', monospace"} or [concentration.ellipse()]{style="font-family: 'Noto Sans Mono', monospace"}
    -   Add a [legend.type()]{style="font-family: 'Noto Sans Mono', monospace"}
-   End with [plot()]{style="font-family: 'Noto Sans Mono', monospace"}

Use pipe ( \|\> ) between each subsequent function. The order in which functions are applied between [biplot()]{style="font-family: 'Noto Sans Mono', monospace"} and [plot()]{style="font-family: 'Noto Sans Mono', monospace"} does not make a difference.

## Simple example for PCA biplot

```{r, echo = TRUE}
biplot(iris[,1:4]) |> PCA() |> samples(col="purple",pch=15) |>  plot()
```

## First step: [biplot()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(biplot)
```

| Argument                                                      | Description                                                               |
|-----------------------|------------------------------------------------|
| [data]{style="font-family: 'Noto Sans Mono', monospace"}      | A dataframe or matrix containing all variables the user wants to analyse. |
| [group.aes]{style="font-family: 'Noto Sans Mono', monospace"} | Variable from the data to be used as a grouping variable.                 |
| [center]{style="font-family: 'Noto Sans Mono', monospace"}    | TRUE or FALSE                                                             |
| [scaled]{style="font-family: 'Noto Sans Mono', monospace"}    | TRUE or FALSE                                                             |
| [Title]{style="font-family: 'Noto Sans Mono', monospace"}     | Title of the biplot to be rendered.                                       |

## First step: [biplot()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot(data = iris)
```

## Step 2: [PCA()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(PCA)
```

| Argument                                                       | Description                                                                                                                          |
|-----------------------|------------------------------------------------|
| [bp]{style="font-family: 'Noto Sans Mono', monospace"}         | Object of class [PCA]{style="font-family: 'Noto Sans Mono', monospace"}.                                                             |
| [dim.biplot]{style="font-family: 'Noto Sans Mono', monospace"} | Dimension of the biplot. Only values 1, 2 and 3 are accepted, with default 2.                                                        |
| [e.vects]{style="font-family: 'Noto Sans Mono', monospace"}    | Which eigenvectors (principal components) to extract, with default [1:dim.biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |

## Step 2: [PCA()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(PCA)
```

| Argument                                                               | Description                                                                                                                                                                                                                                                                                                                                                                            |
|-----------------------|------------------------------------------------|
| [group.aes]{style="font-family: 'Noto Sans Mono', monospace"}          | Optional vector of the same length as the number of rows in the data matrix for differentiated aesthetics for samples.                                                                                                                                                                                                                                                                 |
| [correlation.biplot]{style="font-family: 'Noto Sans Mono', monospace"} | If [FALSE]{style="font-family: 'Noto Sans Mono', monospace"}, the distances between sample points are optimally approximated in the biplot. If [TRUE]{style="font-family: 'Noto Sans Mono', monospace"}, the correlations between variables are optimally approximated by the cosine of the angles between axes. Deafult is [FALSE]{style="font-family: 'Noto Sans Mono', monospace"}. |

## Step 2: [PCA()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot(iris[,1:4]) |> PCA()
```

## Step 3.1: [samples()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(samples)
```

| Argument                                                  | Description                                                                                                                          |
|----------------------------------------------------|--------------------|
| [bp]{style="font-family: 'Noto Sans Mono', monospace"}    | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}.                                                          |
| [col]{style="font-family: 'Noto Sans Mono', monospace"}   | Sample colour.                                                                                                                       |
| [pch]{style="font-family: 'Noto Sans Mono', monospace"}   | Sample plotting character.                                                                                                           |
| [cex]{style="font-family: 'Noto Sans Mono', monospace"}   | Sample character expansion.                                                                                                          |
| [label]{style="font-family: 'Noto Sans Mono', monospace"} | Logical argument, whether samples should be labelled or not, with default [FALSE]{style="font-family: 'Noto Sans Mono', monospace"}. |

## Step 3.1: [samples()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(samples)
```

| Argument                                                       | Description                                                                                                                                                |
|--------------------------------|----------------------------------------|
| [label.cex]{style="font-family: 'Noto Sans Mono', monospace"}  | Label text expansion.                                                                                                                                      |
| [label.side]{style="font-family: 'Noto Sans Mono', monospace"} | Side of the plotting character where label appears, with default ["bottom"]{style="font-family: 'Noto Sans Mono', monospace"}.                             |
| [connected]{style="font-family: 'Noto Sans Mono', monospace"}  | Logical argument, whether samples are connected in order of rows of data matrix, with default ["FALSE"]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [alpha]{style="font-family: 'Noto Sans Mono', monospace"}      | Opacity, with default [1]{style="font-family: 'Noto Sans Mono', monospace"}.                                                                               |

## Step 3.1: [samples()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot(iris[,1:4]) |> PCA() |> samples(col="purple",pch=15) |> plot()
```

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
#| code-overflow: scroll
args(axes)
```

| Argument                                                    | Description                                                                 |
|--------------------------------|----------------------------------------|
| [bp]{style="font-family: 'Noto Sans Mono', monospace"}      | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [X.names]{style="font-family: 'Noto Sans Mono', monospace"} | Data column names for which axes should be constructed.                     |
| [which]{style="font-family: 'Noto Sans Mono', monospace"}   | Column numbers for which axes should be constructed.                        |
| [col]{style="font-family: 'Noto Sans Mono', monospace"}     | Axis colours.                                                               |
| [lwd]{style="font-family: 'Noto Sans Mono', monospace"}     | Axis line widths.                                                           |

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(axes)
```

| Argument                                                       | Description                                                                                                                         |
|--------------------------------|----------------------------------------|
| [lty]{style="font-family: 'Noto Sans Mono', monospace"}        | Axis line types.                                                                                                                    |
| [label.dir]{style="font-family: 'Noto Sans Mono', monospace"}  | Direction of the axis label. "Orthog", "Hor" or "Paral", with default ["Orthog"]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [label.col]{style="font-family: 'Noto Sans Mono', monospace"}  | Colour of the axis label.                                                                                                           |
| [label.cex]{style="font-family: 'Noto Sans Mono', monospace"}  | Character expansion of the axis label.                                                                                              |
| [label.dist]{style="font-family: 'Noto Sans Mono', monospace"} | Distance of the axis label from the plot.                                                                                           |

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(axes)
```

| Argument                                                           | Description                                                                                                           |
|--------------------------------|----------------------------------------|
| [ticks]{style="font-family: 'Noto Sans Mono', monospace"}          | Indicator of the number of tick marks on each axis, with default 5.                                                   |
| [tick.col]{style="font-family: 'Noto Sans Mono', monospace"}       | Colour of tick marks.                                                                                                 |
| [tick.size]{style="font-family: 'Noto Sans Mono', monospace"}      | Size of tick marks.                                                                                                   |
| [tick.label]{style="font-family: 'Noto Sans Mono', monospace"}     | Logical whether tick marks should be labelled, with default [TRUE]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [tick.label.col]{style="font-family: 'Noto Sans Mono', monospace"} | Colour of tick mark labels.                                                                                           |

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(axes)
```

| Argument                                                              | Description                                                                                                                                                                                                                      |
|--------------------------------|----------------------------------------|
| [tick.label.cex]{style="font-family: 'Noto Sans Mono', monospace"}    | Character expansion of of tick mark labels.                                                                                                                                                                                      |
| [tick.label.side]{style="font-family: 'Noto Sans Mono', monospace"}   | On which side of tick marks label should appear, with default ["left"]{style="font-family: 'Noto Sans Mono', monospace"}.                                                                                                        |
| [tick.label.offset]{style="font-family: 'Noto Sans Mono', monospace"} | Offset for position of tick mark labels.                                                                                                                                                                                         |
| [tick.label.pos]{style="font-family: 'Noto Sans Mono', monospace"}    | [pos]{style="font-family: 'Noto Sans Mono', monospace"} argument for [text]{style="font-family: 'Noto Sans Mono', monospace"} function for tick mark labels, with default [1]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [predict.col]{style="font-family: 'Noto Sans Mono', monospace"}       | Colour of lines showing orthogonal projection onto axes.                                                                                                                                                                         |

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"} - continues

```{r, echo = FALSE, eval = TRUE}
args(axes)
```

| Argument                                                        | Description                                                  |
|--------------------------------|----------------------------------------|
| [predict.lwd]{style="font-family: 'Noto Sans Mono', monospace"} | Line width of lines showing orthogonal projection onto axes. |
| [predict.lty]{style="font-family: 'Noto Sans Mono', monospace"} | Line type of lines showing ortghonoal projection onto axes.  |
| [ax.names]{style="font-family: 'Noto Sans Mono', monospace"}    | User specified alternative names for variables.              |
| [orthogx]{style="font-family: 'Noto Sans Mono', monospace"}     | Horizontal translation.                                      |
| [orthogy]{style="font-family: 'Noto Sans Mono', monospace"}     | Vertical translation.                                        |

## Step 3.2: [axes()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot(iris[,1:4]) |> PCA() |> axes(col="purple") |> plot()
```

## Step 4.1: [alpha.bags()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(alpha.bags)
```

| Argument                                                  | Description                                                                                                                                                                                                                        |
|--------------------------------|----------------------------------------|
| [bp]{style="font-family: 'Noto Sans Mono', monospace"}    | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}.                                                                                                                                                        |
| [alpha]{style="font-family: 'Noto Sans Mono', monospace"} | Value between [0]{style="font-family: 'Noto Sans Mono', monospace"} and [1]{style="font-family: 'Noto Sans Mono', monospace"} to determine coverage of bag, with default [0.95]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [which]{style="font-family: 'Noto Sans Mono', monospace"} | Which groups or classes to be fitted with alpha bags.                                                                                                                                                                              |
| [col]{style="font-family: 'Noto Sans Mono', monospace"}   | Vector of colours for the alpha bags.                                                                                                                                                                                              |

## Step 4.1: [alpha.bags()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot (iris[,1:4]) |> PCA(group.aes=iris[,5]) |> alpha.bags(alpha=0.95) |> plot()
```

## Step 4.2: [concentration.ellipse()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(concentration.ellipse)
```

| Argument                                                | Description                                                                       |
|--------------------------------|----------------------------------------|
| [lty]{style="font-family: 'Noto Sans Mono', monospace"} | Vector of line types for the alpha bags.                                          |
| [lwd]{style="font-family: 'Noto Sans Mono', monospace"} | Vector of line widths for the alpha bags.                                         |
| [max]{style="font-family: 'Noto Sans Mono', monospace"} | Maximum number of samples to include in alpha bag calculation, with default 2500. |

## Step 4.2: [concentration.ellipse()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot (iris[,1:4]) |> PCA(group.aes=iris[,5]) |> concentration.ellipse(kappa=2) |> plot()
```

## Step 5: [legend.type()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(legend.type)
```

| Argument                                                    | Description                                                                                                                               |
|---------------|---------------------------------------------------------|
| [bp]{style="font-family: 'Noto Sans Mono', monospace"}      | Object of class [biplot]{style="font-family: 'Noto Sans Mono', monospace"}.                                                               |
| [samples]{style="font-family: 'Noto Sans Mono', monospace"} | Logical argument, whether legend should be printed for samples, with default ["FALSE"]{style="font-family: 'Noto Sans Mono', monospace"}. |
| [means]{style="font-family: 'Noto Sans Mono', monospace"}   | Logical argument, whether legend should be printed for means, with default ["FALSE"]{style="font-family: 'Noto Sans Mono', monospace"}.   |
| [bags]{style="font-family: 'Noto Sans Mono', monospace"}    | Logical argument, whether legend should be printed for bags, with default ["FALSE"]{style="font-family: 'Noto Sans Mono', monospace"}.    |
| [new]{style="font-family: 'Noto Sans Mono', monospace"}     | Logical argument, whether legend should appear on a new page, with default ["FALSE"]{style="font-family: 'Noto Sans Mono', monospace"}.   |

## Step 5: [legend.type()]{style="font-family: 'Noto Sans Mono', monospace"} - Example

```{r, echo = TRUE, eval = TRUE}
biplot (iris[,1:4], Title="Test biplot") |> PCA(group.aes = iris[,5]) |>
    legend.type(samples=TRUE) |> plot()
```

## Final step: [plot()]{style="font-family: 'Noto Sans Mono', monospace"}

```{r, echo = FALSE, eval = TRUE}
args(plot)
```

plot(x, exp.factor = 1.2, ...)
